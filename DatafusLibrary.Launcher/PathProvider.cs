using Cake.Common.Diagnostics;
using Cake.Common.IO;
using Cake.Common.Solution;
using Cake.Core;
using Cake.Core.IO;
using Cake.Frosting;
using Path = System.IO.Path;

namespace DatafusLibrary.Launcher;

public class PathProvider : FrostingContext
{
    private const string RunnerDefaultTemp = "/home/runner/work/_temp/";
    private const string TestProjectName = "DatafusLibrary.SourceGenerators.Tests";
    private static string _currentDirectory = string.Empty;
    private static ICakeContext _context = null!;
    private static FilePath _testProjectPath = string.Empty;
    public readonly FilePath AutogeneratedOutputPath;
    public readonly FilePath DatafusReleaseDownloadPath;
    public readonly FilePath SolutionPath;
    public FilePath? TestProjectAssemblyPath;
    public FilePath? TestProjectOutputPath;

    public PathProvider(ICakeContext context) : base(context)
    {
        _context = context;
        _currentDirectory = Directory.GetCurrentDirectory();

        SolutionPath = ToSolution();
        DatafusReleaseDownloadPath = ToTemp() + "datafusRelease";
        AutogeneratedOutputPath = DatafusReleaseDownloadPath + AutogeneratedSegment;
    }

    private static string SolutionFilePathSegment => OperatingSystem.IsLinux()
        ? "/DatafusLibrary/DatafusLibrary.sln"
        : "\\DatafusLibrary.sln";

    private static string DebugOutputPathSegment => OperatingSystem.IsLinux()
        ? "/bin/Debug/net7.0/"
        : "\\bin\\Debug\\net7.0\\";

    private static string AutogeneratedSegment => OperatingSystem.IsLinux()
        ? "/data/entities_json/autogenerated/"
        : "\\data\\entities_json\\autogenerated\\";

    private static string ToSolution()
    {
        if (string.IsNullOrEmpty(_currentDirectory))
            throw new NullReferenceException(nameof(_currentDirectory));

        var solutionDir = Directory.GetParent(_currentDirectory)?.Parent?.Parent;
        var solutionFilePath = solutionDir + SolutionFilePathSegment;

        if (OperatingSystem.IsLinux())
            solutionFilePath = _currentDirectory + SolutionFilePathSegment;

        if (!_context.FileExists(solutionFilePath))
            _context.Error($"File at path: {solutionFilePath} not found!");

        return solutionFilePath;
    }

    private static string ToTemp()
    {
        var tempPath = OperatingSystem.IsLinux()
            ? RunnerDefaultTemp
            : Path.GetTempPath();

        if (!_context.DirectoryExists(tempPath))
            _context.Error($"Dir at path: {tempPath} not found!");

        return tempPath;
    }

    public void LoadTestProjectFullPath(IEnumerable<SolutionProject> projects)
    {
        var testsProject = projects.FirstOrDefault(project => project.Name
            .Equals(TestProjectName, StringComparison.Ordinal));

        if (testsProject is null)
            throw new NullReferenceException(nameof(testsProject));
        if (testsProject.Path is null)
            throw new NullReferenceException(nameof(testsProject.Path));
        if (string.IsNullOrEmpty(testsProject.Path.ToString()))
            throw new NullReferenceException(nameof(testsProject.Path));

        if (!_context.FileExists(testsProject.Path.FullPath))
            _context.Error($"File at path: {testsProject.Path.FullPath} not found!");

        _context.Information($"Test project path: {testsProject.Path.FullPath}");
        _testProjectPath = testsProject.Path;

        LoadTestProjectOutputPath();
        LoadTestAssemblyPath();
    }

    private void LoadTestProjectOutputPath()
    {
        var testProjectOutputPath = _testProjectPath.FullPath.Replace(
            _testProjectPath.Segments.Last(),
            DebugOutputPathSegment);

        _context.Information($"Test project output path: {testProjectOutputPath}");

        TestProjectOutputPath = testProjectOutputPath;
    }

    private void LoadTestAssemblyPath()
    {
        var testProjectAssemblyPath = _testProjectPath.FullPath.Replace(
            _testProjectPath.Segments.Last(),
            DebugOutputPathSegment + TestProjectName + ".dll");

        _context.Information($"Test project assembly path: {testProjectAssemblyPath}");

        TestProjectAssemblyPath = testProjectAssemblyPath;
    }
}