using Cake.Common.Diagnostics;
using Cake.Common.IO;
using Cake.Common.Solution;
using Cake.Core;
using Cake.Core.IO;
using Cake.Frosting;
using Path = System.IO.Path;

namespace DatafusLibrary.Launcher;

public sealed class PathProvider : FrostingContext
{
    private const string RunnerDefaultTemp = "/home/runner/work/_temp/";
    private const string SolutionDirName = "DatafusLibrary";
    private const string TestProjectName = "DatafusLibrary.SourceGenerators.Tests";
    private const string DownloadDirName = "datafusRelease";

    private const string SolutionFileExtension = ".sln";
    private const string AssemblyFileExtension = ".dll";
    private const string BinaryFilesFolder = "bin";
    private const string BuildConfiguration = "Debug";
    private const string NetFrameworkVersion = "net7.0";

    private static ICakeContext? _context;
    private static FilePath? _testProjectPath;
    private static string? _currentDirectory;

    internal readonly FilePath AutogeneratedOutputPath;
    internal readonly FilePath DatafusReleaseDownloadPath;
    internal readonly FilePath SolutionPath;
    internal FilePath? TestProjectAssemblyPath;
    internal FilePath? TestProjectOutputPath;

    internal PathProvider(ICakeContext context) : base(context)
    {
        ArgumentNullException.ThrowIfNull(context);

        _context = context;
        // on Win system.IO returns '\' paths, FilePath by default returns '/'
        _currentDirectory = Directory.GetCurrentDirectory();
        // silent path separator conversion '\' -> '/'
        SolutionPath = LoadSolutionPath();
        DatafusReleaseDownloadPath = (OperatingSystem.IsLinux()
            ? RunnerDefaultTemp
            : Path.GetTempPath()) + DownloadDirName;
        AutogeneratedOutputPath = DatafusReleaseDownloadPath + Path.Join(
            Path.DirectorySeparatorChar.ToString(), "data", "entities_json", "autogenerated");
    }

    private static string LoadSolutionPath()
    {
        var SolutionFilePathSegment = OperatingSystem.IsLinux()
            ? Path.Join(Path.DirectorySeparatorChar.ToString(), SolutionDirName, SolutionDirName + SolutionFileExtension)
            : Path.Join(Path.DirectorySeparatorChar.ToString(), SolutionDirName + SolutionFileExtension);

        ArgumentException.ThrowIfNullOrEmpty(_currentDirectory);

        var solutionDir = Directory.GetParent(_currentDirectory)?.Parent?.Parent;
        var solutionFilePath = solutionDir + SolutionFilePathSegment;

        if (OperatingSystem.IsLinux())
            solutionFilePath = _currentDirectory + SolutionFilePathSegment;

        if (!_context.FileExists(solutionFilePath))
            throw new CakeException($"File at path: {solutionFilePath} not found!");

        return solutionFilePath;
    }

    internal void LoadTestProjectFullPath(IEnumerable<SolutionProject> projects)
    {
        var DebugOutputPathSegment = Path.Join(Path.DirectorySeparatorChar.ToString(),
            BinaryFilesFolder, BuildConfiguration, NetFrameworkVersion);

        var testsProject = projects.FirstOrDefault(project =>
            project.Name.Equals(TestProjectName, StringComparison.Ordinal));

        ArgumentNullException.ThrowIfNull(testsProject);
        ArgumentNullException.ThrowIfNull(testsProject.Path);

        if (!_context.FileExists(testsProject.Path.FullPath))
            throw new CakeException($"File at path: {testsProject.Path.FullPath} not found!");

        _testProjectPath = testsProject.Path;
        TestProjectOutputPath = _testProjectPath.FullPath.Replace(_testProjectPath.Segments.Last(),
            DebugOutputPathSegment);
        TestProjectAssemblyPath = _testProjectPath.FullPath.Replace(_testProjectPath.Segments.Last(),
            DebugOutputPathSegment + Path.DirectorySeparatorChar + TestProjectName + AssemblyFileExtension);

        _context.Information("\n Path resolution started...");
        _context.Information($"Test project path: {_testProjectPath.FullPath}");
        _context.Information($"Test project output path: {TestProjectOutputPath}");
        _context.Information($"Test project assembly path: {TestProjectAssemblyPath}");
    }
}