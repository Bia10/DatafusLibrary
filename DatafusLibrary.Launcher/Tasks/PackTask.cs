using System.IO.Compression;
using Cake.Common.Diagnostics;
using Cake.Common.IO;
using Cake.Frosting;

namespace DatafusLibrary.Launcher.Tasks;

[TaskName("Pack")]
[IsDependentOn(typeof(TestTask))]
public sealed class PackTask : AsyncFrostingTask<LaunchContext>
{
    public override Task RunAsync(LaunchContext context)
    {
        context.Information("Packing started...");

        var testProjectOutputPath = context.LocalPathProvider.TestProjectOutputPath;
        var autogeneratedOutputPath = context.LocalPathProvider.AutogeneratedOutputPath;

        try
        {
            var tempDir = Directory.CreateTempSubdirectory();
            context.Information($"Copying from: {autogeneratedOutputPath.FullPath} to:{tempDir.FullName}");
            context.CopyDirectory(autogeneratedOutputPath.FullPath, tempDir.FullName);

            if (context.FileExists(testProjectOutputPath + "_release.zip"))
                context.DeleteFile(testProjectOutputPath + "_release.zip");

            context.Information($"Compressing from: {tempDir.FullName} to: {testProjectOutputPath}" + "_release.zip");
            ZipFile.CreateFromDirectory(tempDir.FullName, testProjectOutputPath + "_release.zip");

            if (!context.FileExists(testProjectOutputPath + "_release.zip"))
                context.Error($"Zip archive not found at destination: {testProjectOutputPath + "_release.zip"}");
        }
        catch (Exception ex)
        {
            context.Error(ex);
            throw;
        }

        context.Information("Packing finished...");

        return Task.CompletedTask;
    }
}